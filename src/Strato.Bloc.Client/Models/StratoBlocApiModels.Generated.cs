//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.15.0.0 (NJsonSchema v9.10.25.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Strato.Bloc.Client.Models
{
    /// <summary>Bloc Transaction Status</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BlocTransactionStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "Success")]
        Success = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Failure")]
        Failure = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Pending")]
        Pending = 2
    }

    /// <summary>Transaction Result</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TransactionResult
    {
        [Newtonsoft.Json.JsonProperty("blockHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BlockHash { get; set; }

        [Newtonsoft.Json.JsonProperty("transactionHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionHash { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Response { get; set; }

        [Newtonsoft.Json.JsonProperty("trace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trace { get; set; }

        [Newtonsoft.Json.JsonProperty("gasUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GasUsed { get; set; }

        [Newtonsoft.Json.JsonProperty("etherUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EtherUsed { get; set; }

        [Newtonsoft.Json.JsonProperty("contractsCreated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractsCreated { get; set; }

        [Newtonsoft.Json.JsonProperty("contractsDeleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractsDeleted { get; set; }

        [Newtonsoft.Json.JsonProperty("stateDiff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateDiff { get; set; }

        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Time { get; set; }

        [Newtonsoft.Json.JsonProperty("newStorage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NewStorage { get; set; }

        [Newtonsoft.Json.JsonProperty("deletedStorage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeletedStorage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TransactionResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransactionResult>(data);
        }
    }

    /// <summary>Bloc Transaction Data</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BlocTransactionData
    {
        [Newtonsoft.Json.JsonProperty("Send", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PostTransaction Send { get; set; }

        [Newtonsoft.Json.JsonProperty("Upload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContractDetails Upload { get; set; }

        [Newtonsoft.Json.JsonProperty("Call", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Call { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BlocTransactionData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BlocTransactionData>(data);
        }
    }

    /// <summary>Returned data from contract creation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractDetails
    {
        [Newtonsoft.Json.JsonProperty("bin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bin { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("binRuntime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BinRuntime { get; set; }

        [Newtonsoft.Json.JsonProperty("codeHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeHash { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("xabi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public XabiSchema Xabi { get; set; } = new XabiSchema();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContractDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractDetails>(data);
        }
    }

    /// <summary>Xabi types</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class XabiSchema
    {
        [Newtonsoft.Json.JsonProperty("funcs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, FunctionType> Funcs { get; set; } = new System.Collections.Generic.Dictionary<string, FunctionType>();

        [Newtonsoft.Json.JsonProperty("constr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, FunctionType> Constr { get; set; } = new System.Collections.Generic.Dictionary<string, FunctionType>();

        [Newtonsoft.Json.JsonProperty("vars", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, VarType> Vars { get; set; } = new System.Collections.Generic.Dictionary<string, VarType>();

        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, TypeDef> Types { get; set; } = new System.Collections.Generic.Dictionary<string, TypeDef>();

        [Newtonsoft.Json.JsonProperty("modifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, FunctionModifier> Modifiers { get; set; } = new System.Collections.Generic.Dictionary<string, FunctionModifier>();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static XabiSchema FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<XabiSchema>(data);
        }
    }

    /// <summary>Xabi Function Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FunctionType
    {
        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, SolidityType> Args { get; set; } = new System.Collections.Generic.Dictionary<string, SolidityType>();

        [Newtonsoft.Json.JsonProperty("vals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, SolidityType> Vals { get; set; } = new System.Collections.Generic.Dictionary<string, SolidityType>();

        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contents { get; set; }

        [Newtonsoft.Json.JsonProperty("mutable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Mutable { get; set; }

        [Newtonsoft.Json.JsonProperty("payable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Payable { get; set; }

        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VisibilityOfAFunction? Visibility { get; set; }

        [Newtonsoft.Json.JsonProperty("modifiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Modifiers { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static FunctionType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FunctionType>(data);
        }
    }

    /// <summary>Represents a soldity type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SolidityType
    {
        [Newtonsoft.Json.JsonProperty("indexedTypeIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IndexedTypeIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("indexedTypeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SolidityType IndexedTypeType { get; set; } = new SolidityType();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SolidityType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SolidityType>(data);
        }
    }

    /// <summary>Xabi Function Visibility</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum VisibilityOfAFunction
    {
        [System.Runtime.Serialization.EnumMember(Value = "Private")]
        Private = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Public")]
        Public = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Internal")]
        Internal = 2,

        [System.Runtime.Serialization.EnumMember(Value = "External")]
        External = 3,

    }

    /// <summary>Represents a Solidity Variable</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VarType
    {
        [Newtonsoft.Json.JsonProperty("varTypeAtBytes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int VarTypeAtBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("varTypePublic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VarTypePublic { get; set; }

        [Newtonsoft.Json.JsonProperty("varTypeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SolidityType VarTypeType { get; set; } = new SolidityType();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static VarType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VarType>(data);
        }
    }

    /// <summary>User defined type (Struct or Enum)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TypeDef
    {
        [Newtonsoft.Json.JsonProperty("Enum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Enum Enum { get; set; }

        [Newtonsoft.Json.JsonProperty("Struct", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Struct Struct { get; set; }

        [Newtonsoft.Json.JsonProperty("Contract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contract Contract { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TypeDef FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TypeDef>(data);
        }
    }

    /// <summary>Represents a Solidity Field Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FieldType
    {
        [Newtonsoft.Json.JsonProperty("fieldTypeAtBytes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FieldTypeAtBytes { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldTypeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SolidityType FieldTypeType { get; set; } = new SolidityType();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static FieldType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldType>(data);
        }
    }

    /// <summary>Xabi Function Modifier</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FunctionModifier
    {
        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, SolidityType> Args { get; set; } = new System.Collections.Generic.Dictionary<string, SolidityType>();

        [Newtonsoft.Json.JsonProperty("selector", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Selector { get; set; }

        [Newtonsoft.Json.JsonProperty("vals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, SolidityType> Vals { get; set; } = new System.Collections.Generic.Dictionary<string, SolidityType>();

        [Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contents { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static FunctionModifier FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FunctionModifier>(data);
        }
    }

    /// <summary>Send ether from one account to another (value is in Wei)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostSendParameters
    {
        [Newtonsoft.Json.JsonProperty("toAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("txParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionParameters TxParams { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PostSendParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostSendParameters>(data);
        }
    }

    /// <summary>Transaction Parameters</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TransactionParameters
    {
        [Newtonsoft.Json.JsonProperty("gasLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GasLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("gasPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GasPrice { get; set; }

        [Newtonsoft.Json.JsonProperty("nonce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Nonce { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TransactionParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransactionParameters>(data);
        }
    }

    /// <summary>Post Users Contract Request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostUsersContractRequest
    {
        /// <summary>Solidity source code</summary>
        [Newtonsoft.Json.JsonProperty("src", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Src { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>Contract name</summary>
        [Newtonsoft.Json.JsonProperty("contract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contract { get; set; }

        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Args { get; set; }

        [Newtonsoft.Json.JsonProperty("txParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionParameters TxParams { get; set; }

        /// <summary>Contract value in Eth</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PostUsersContractRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostUsersContractRequest>(data);
        }
    }

    /// <summary>Make a request to upload a list of contracts</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UploadListRequest
    {
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("contracts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<UploadListContract> Contracts { get; set; } = new System.Collections.ObjectModel.ObservableCollection<UploadListContract>();

        [Newtonsoft.Json.JsonProperty("resolve", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Resolve { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UploadListRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadListRequest>(data);
        }
    }

    /// <summary>A contract in a list of to-upload contracts</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UploadListContract
    {
        [Newtonsoft.Json.JsonProperty("contractName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractName { get; set; }

        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Args { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        [Newtonsoft.Json.JsonProperty("txParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionParameters TxParams { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UploadListContract FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UploadListContract>(data);
        }
    }

    /// <summary>Post Users Contract Method Request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostUsersContractMethodRequest
    {
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>Method name</summary>
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Method { get; set; }

        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Args { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        /// <summary>Method value in Eth</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("txParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionParameters TxParams { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PostUsersContractMethodRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostUsersContractMethodRequest>(data);
        }
    }

    /// <summary>Send a list of users some ether (value in Wei)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostUsersSendListRequest
    {
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("resolve", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Resolve { get; set; }

        [Newtonsoft.Json.JsonProperty("txs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SendTransaction> Txs { get; set; } = new System.Collections.ObjectModel.ObservableCollection<SendTransaction>();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PostUsersSendListRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostUsersSendListRequest>(data);
        }
    }

    /// <summary>Single transaction for batch</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SendTransaction
    {
        [Newtonsoft.Json.JsonProperty("toAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        [Newtonsoft.Json.JsonProperty("txParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionParameters TxParams { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SendTransaction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SendTransaction>(data);
        }
    }

    /// <summary>Everything you need to batch method calls</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostMethodListRequest
    {
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("resolve", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Resolve { get; set; }

        [Newtonsoft.Json.JsonProperty("txs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<MethodCall> Txs { get; set; } = new System.Collections.ObjectModel.ObservableCollection<MethodCall>();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PostMethodListRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostMethodListRequest>(data);
        }
    }

    /// <summary>Everything you'll need for a method call</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MethodCall
    {
        [Newtonsoft.Json.JsonProperty("contractName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractName { get; set; }

        [Newtonsoft.Json.JsonProperty("contractAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("methodName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MethodName { get; set; }

        [Newtonsoft.Json.JsonProperty("args", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Args { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }

        [Newtonsoft.Json.JsonProperty("txParams", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionParameters TxParams { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MethodCall FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MethodCall>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostCompileResponse
    {
        [Newtonsoft.Json.JsonProperty("contractName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractName { get; set; }

        [Newtonsoft.Json.JsonProperty("codeHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeHash { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PostCompileResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostCompileResponse>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PostCompileRequest
    {
        [Newtonsoft.Json.JsonProperty("searchable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Searchable { get; set; }

        [Newtonsoft.Json.JsonProperty("contractName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContractName { get; set; }

        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PostCompileRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PostCompileRequest>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SearchContractState
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> State { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SearchContractState FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchContractState>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Enum
    {
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Names { get; set; } = new System.Collections.ObjectModel.ObservableCollection<string>();

        [Newtonsoft.Json.JsonProperty("bytes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bytes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Enum FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Enum>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Struct
    {
        [Newtonsoft.Json.JsonProperty("bytes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bytes { get; set; }

        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, FieldType> Fields { get; set; } = new System.Collections.Generic.Dictionary<string, FieldType>();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Struct FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Struct>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.25.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Contract
    {
        [Newtonsoft.Json.JsonProperty("bytes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bytes { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Contract FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Contract>(data);
        }
    }
}